# Search a 2D matrix
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m=matrix.length;
        int n=matrix[0].length;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(matrix[i][j]==target){
                    return true;
                }
            }
        }
        return false;
    }
}

# Spiral matrix
class Solution {
    public List<Integer> spiralOrder(int[][] mat) {
        ArrayList<Integer> result = new ArrayList<>();
        
        int top = 0;
        int bottom = mat.length - 1;
        int left = 0;
        int right = mat[0].length - 1;
        
        while(top <= bottom && left <= right) {
            for(int i = left; i <= right; i++) {
                result.add(mat[top][i]);
            }
            top++;
            
            for(int i = top; i <= bottom; i++) {
                result.add(mat[i][right]);
            }
            right--;
            
            if(top <= bottom) {
                for(int i = right; i >= left; i--) {
                    result.add(mat[bottom][i]);
                }
                bottom--;
            }
            
            if(left <= right) {
                for(int i = bottom; i >= top; i--) {
                    result.add(mat[i][left]);
                }
                left++;
            }
        }
        
        return result;
    }
}

# Number of Islands
class Solution {
    
    
    static boolean isValid(int n_r, int n_c, int rows, int cols, boolean[][] vis, char[][] grid) {
    if(n_r >= 0 && n_r < rows && n_c >= 0 && n_c < cols && !vis[n_r][n_c] && grid[n_r][n_c] != '0') {
        return true;
    }
    return false;
}
    
    void bfs(char[][] grid, int c_r, int c_c, int rows, int cols,  boolean[][] vis){
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{c_r,c_c});
        
        vis[c_r][c_c] = true;
        
        int[] dr = {0,1,0,-1};
        int[] dc = {1,0,-1,0};
        
        while(!q.isEmpty()){
            int[] curr = q.poll();
            int cur_row = curr[0];
            int cur_col = curr[1];
            
            for(int i=0; i<4; i++){
                int n_r = cur_row+dr[i];
                int n_c = cur_col+dc[i];
                if(isValid(n_r,n_c,rows, cols,vis,grid)){
                    vis[n_r][n_c] = true;
                    q.add(new int[]{n_r,n_c});
                }
            }
            
        }
        
    }
    
    public int numIslands(char[][] grid) {
        // Code here
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] vis = new boolean[m][n];
        int count = 0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(!vis[i][j] && grid[i][j] != '0'){
                    bfs(grid,i,j,m,n,vis);
                    count++;
                }
            }
        }
        return count;
    }
}
